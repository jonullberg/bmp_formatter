'use strict';

var expect = require('chai').expect;
var create = require('../lib/create.js');
var change = require('../lib/change.js');
var fs = require('fs');

describe('Color Transforms', function() {
  var path = '../tmp/tester.bmp';
  describe('Access Palette', function() {
    it('Should return a transformed buffer', function() {
      var expectString = '424df2040000000000007a0400006c0000000a0000000a000000010008000000000078000000120b0000120b000000010000000100004247ff730000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000200ff000000ff000000ff000000ff000000ff003420ff003c28ff003139ff003b56ff002671ff0066a0ff009ac3ff0036f2ff0050e5ff0030beff006e94ff002f69ff00244bff00393cff00743fff008260ff00e16eff00ff9bff00e4cdff00fcdbff00ffffff00b7adff00877eff006a6aff005256ff008a42ff003232ff006357ff00ba7bff004a97ff00306fff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c1c0f0f0f0c0009001c00000f0f0f0f0f0909090f1c00001c0f0f0f0f09090f0f1c00000f0f0f0f0f09090f0f0f0000160f0f0f0f090f0f0f0f00000f0f0f0f09090f0f0f1c000000160f0f0f0f0c0f0f00000000160909090f0f0c0f1600001c1c0f0c0f0f0f0f0f1600001c1616161616161616000000';
      fs.readFile(path, function(err, data) {
        if (err) throw err;
        var newBuffer = new Buffer(data);
        var bitmap = {};
      	bitmap = create.createFileHeader(data);
      	bitmap = create.createInfoHeader(bitmap, data);
        expect(change.changePaletteValue(newBuffer, bitmap.colorTable, 'red', 255, 56).toString('hex')).to.eql(expectString);
      });
    });
  });

  describe('Access Pixel Data', function() {
    it('Should return a transformed buffer', function() {
      var expectString = '424df2040000000000007a0400006c0000000a0000000a000000010008000000000078000000120b0000120b000000010000000100004247ff7300ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff0000ff0002ff0000ff0000ff0000ff0000ff0000ff0000ff3420ff003cff4500ff3966ff3b56ff0026ffdf00ffa0d9ff9ac3ff0036fffb00ffe599ff30beff006eff3700ff694bff244b5200393c3200743f3f0082603000e16e5b00ff9b6300e4cd5f00fcdbcb00ffffff00b7ad9b00877e84006a6a6900525659008a4276003232ac006357d900ba7bd7004a978f00306f8ac1c0f0f0f0c0009001c00000f0f0f0f0f0909090f1c00001c0f0f0f0f09090f0f1c00000f0f0f0f0f09090f0f0f0000160f0f0f0f090f0f0f0f00000f0f0f0f09090f0f0f1c000000160f0f0f0f0c0f0f00000000160909090f0f0c0f1600001c1c0f0c0f0f0f0f0f1600001c1616161616161616000000';
      fs.readFile(path, function(err, data) {
        if (err) throw err;
        var newBuffer = new Buffer(data);
        var bitmap = {};
        bitmap = create.createFileHeader(data);
        bitmap = create.createInfoHeader(bitmap, data);
        expect(change.changePixelValue(newBuffer, bitmap.pixelData, 'red', 255, 56).toString('hex')).to.eql(expectString);
      });
    });
  });
});
